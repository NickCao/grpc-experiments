# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import jumpstarter_pb2 as jumpstarter__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in jumpstarter_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ForExporterStub(object):
    """A service where a exporter can connect to make itself available
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/jumpstarter.ForExporter/Register',
                request_serializer=jumpstarter__pb2.ExporterReport.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ControlStream = channel.stream_stream(
                '/jumpstarter.ForExporter/ControlStream',
                request_serializer=jumpstarter__pb2.ClientResponse.SerializeToString,
                response_deserializer=jumpstarter__pb2.ServerCommand.FromString,
                _registered_method=True)
        self.Bye = channel.unary_unary(
                '/jumpstarter.ForExporter/Bye',
                request_serializer=jumpstarter__pb2.ExporterBye.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DataStream = channel.stream_stream(
                '/jumpstarter.ForExporter/DataStream',
                request_serializer=jumpstarter__pb2.DataChunk.SerializeToString,
                response_deserializer=jumpstarter__pb2.DataChunk.FromString,
                _registered_method=True)
        self.EventStream = channel.stream_stream(
                '/jumpstarter.ForExporter/EventStream',
                request_serializer=jumpstarter__pb2.Event.SerializeToString,
                response_deserializer=jumpstarter__pb2.Event.FromString,
                _registered_method=True)


class ForExporterServicer(object):
    """A service where a exporter can connect to make itself available
    """

    def Register(self, request, context):
        """Exporter registration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ControlStream(self, request_iterator, context):
        """Server <-> Exporter command streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Bye(self, request, context):
        """Exporter disconnection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DataStream(self, request_iterator, context):
        """Messages for streaming drivers (audio/video/serial/other)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EventStream(self, request_iterator, context):
        """Events from/to drivers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ForExporterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=jumpstarter__pb2.ExporterReport.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ControlStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ControlStream,
                    request_deserializer=jumpstarter__pb2.ClientResponse.FromString,
                    response_serializer=jumpstarter__pb2.ServerCommand.SerializeToString,
            ),
            'Bye': grpc.unary_unary_rpc_method_handler(
                    servicer.Bye,
                    request_deserializer=jumpstarter__pb2.ExporterBye.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DataStream': grpc.stream_stream_rpc_method_handler(
                    servicer.DataStream,
                    request_deserializer=jumpstarter__pb2.DataChunk.FromString,
                    response_serializer=jumpstarter__pb2.DataChunk.SerializeToString,
            ),
            'EventStream': grpc.stream_stream_rpc_method_handler(
                    servicer.EventStream,
                    request_deserializer=jumpstarter__pb2.Event.FromString,
                    response_serializer=jumpstarter__pb2.Event.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jumpstarter.ForExporter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('jumpstarter.ForExporter', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ForExporter(object):
    """A service where a exporter can connect to make itself available
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jumpstarter.ForExporter/Register',
            jumpstarter__pb2.ExporterReport.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ControlStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/jumpstarter.ForExporter/ControlStream',
            jumpstarter__pb2.ClientResponse.SerializeToString,
            jumpstarter__pb2.ServerCommand.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Bye(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jumpstarter.ForExporter/Bye',
            jumpstarter__pb2.ExporterBye.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DataStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/jumpstarter.ForExporter/DataStream',
            jumpstarter__pb2.DataChunk.SerializeToString,
            jumpstarter__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EventStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/jumpstarter.ForExporter/EventStream',
            jumpstarter__pb2.Event.SerializeToString,
            jumpstarter__pb2.Event.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ForClientStub(object):
    """A service a exporter can share locally to be used without a server
    Channel/Call credentials are used to authenticate the client, and routing to the right exporter
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetReport = channel.unary_unary(
                '/jumpstarter.ForClient/GetReport',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=jumpstarter__pb2.ExporterReport.FromString,
                _registered_method=True)
        self.ControlStream = channel.stream_stream(
                '/jumpstarter.ForClient/ControlStream',
                request_serializer=jumpstarter__pb2.ServerCommand.SerializeToString,
                response_deserializer=jumpstarter__pb2.ClientResponse.FromString,
                _registered_method=True)
        self.DataStream = channel.stream_stream(
                '/jumpstarter.ForClient/DataStream',
                request_serializer=jumpstarter__pb2.DataChunk.SerializeToString,
                response_deserializer=jumpstarter__pb2.DataChunk.FromString,
                _registered_method=True)


class ForClientServicer(object):
    """A service a exporter can share locally to be used without a server
    Channel/Call credentials are used to authenticate the client, and routing to the right exporter
    """

    def GetReport(self, request, context):
        """Exporter registration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ControlStream(self, request_iterator, context):
        """Server <-> Exporter command streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DataStream(self, request_iterator, context):
        """Messages for streaming drivers (audio/video/serial/other)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ForClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReport,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=jumpstarter__pb2.ExporterReport.SerializeToString,
            ),
            'ControlStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ControlStream,
                    request_deserializer=jumpstarter__pb2.ServerCommand.FromString,
                    response_serializer=jumpstarter__pb2.ClientResponse.SerializeToString,
            ),
            'DataStream': grpc.stream_stream_rpc_method_handler(
                    servicer.DataStream,
                    request_deserializer=jumpstarter__pb2.DataChunk.FromString,
                    response_serializer=jumpstarter__pb2.DataChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jumpstarter.ForClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('jumpstarter.ForClient', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ForClient(object):
    """A service a exporter can share locally to be used without a server
    Channel/Call credentials are used to authenticate the client, and routing to the right exporter
    """

    @staticmethod
    def GetReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jumpstarter.ForClient/GetReport',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            jumpstarter__pb2.ExporterReport.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ControlStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/jumpstarter.ForClient/ControlStream',
            jumpstarter__pb2.ServerCommand.SerializeToString,
            jumpstarter__pb2.ClientResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DataStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/jumpstarter.ForClient/DataStream',
            jumpstarter__pb2.DataChunk.SerializeToString,
            jumpstarter__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
