// Copyright 2024 The Jumpstarter Authors

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.3
// source: proto/jumpstarter.proto

package grpc_experiments

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestOneof:
	//
	//	*ServerCommand_Ping
	//	*ServerCommand_DriverCall
	//	*ServerCommand_Event
	RequestOneof isServerCommand_RequestOneof `protobuf_oneof:"request_oneof"`
}

func (x *ServerCommand) Reset() {
	*x = ServerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCommand) ProtoMessage() {}

func (x *ServerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCommand.ProtoReflect.Descriptor instead.
func (*ServerCommand) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{0}
}

func (m *ServerCommand) GetRequestOneof() isServerCommand_RequestOneof {
	if m != nil {
		return m.RequestOneof
	}
	return nil
}

func (x *ServerCommand) GetPing() *Ping {
	if x, ok := x.GetRequestOneof().(*ServerCommand_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *ServerCommand) GetDriverCall() *DriverCall {
	if x, ok := x.GetRequestOneof().(*ServerCommand_DriverCall); ok {
		return x.DriverCall
	}
	return nil
}

func (x *ServerCommand) GetEvent() *Event {
	if x, ok := x.GetRequestOneof().(*ServerCommand_Event); ok {
		return x.Event
	}
	return nil
}

type isServerCommand_RequestOneof interface {
	isServerCommand_RequestOneof()
}

type ServerCommand_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type ServerCommand_DriverCall struct {
	DriverCall *DriverCall `protobuf:"bytes,2,opt,name=driver_call,json=driverCall,proto3,oneof"`
}

type ServerCommand_Event struct {
	Event *Event `protobuf:"bytes,3,opt,name=event,proto3,oneof"`
}

func (*ServerCommand_Ping) isServerCommand_RequestOneof() {}

func (*ServerCommand_DriverCall) isServerCommand_RequestOneof() {}

func (*ServerCommand_Event) isServerCommand_RequestOneof() {}

// Server to exporter ping request
// NOTE: we can probably remove ping and rely on gRPC session keepalives
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Seq  uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{1}
}

func (x *Ping) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Ping) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// Server to client call into a driver
type DriverCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId     string            `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	CallUuid     string            `protobuf:"bytes,2,opt,name=call_uuid,json=callUuid,proto3" json:"call_uuid,omitempty"`
	DriverMethod string            `protobuf:"bytes,3,opt,name=driver_method,json=driverMethod,proto3" json:"driver_method,omitempty"`
	Args         []*structpb.Value `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *DriverCall) Reset() {
	*x = DriverCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCall) ProtoMessage() {}

func (x *DriverCall) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCall.ProtoReflect.Descriptor instead.
func (*DriverCall) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{2}
}

func (x *DriverCall) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DriverCall) GetCallUuid() string {
	if x != nil {
		return x.CallUuid
	}
	return ""
}

func (x *DriverCall) GetDriverMethod() string {
	if x != nil {
		return x.DriverMethod
	}
	return ""
}

func (x *DriverCall) GetArgs() []*structpb.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

type ExporterBye struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ExporterBye) Reset() {
	*x = ExporterBye{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExporterBye) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExporterBye) ProtoMessage() {}

func (x *ExporterBye) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExporterBye.ProtoReflect.Descriptor instead.
func (*ExporterBye) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{3}
}

func (x *ExporterBye) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ExporterBye) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// ExporterReport
type ExporterReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Hostname     string            `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Name         string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Labels       map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeviceReport []*DeviceReport   `protobuf:"bytes,5,rep,name=device_report,json=deviceReport,proto3" json:"device_report,omitempty"`
}

func (x *ExporterReport) Reset() {
	*x = ExporterReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExporterReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExporterReport) ProtoMessage() {}

func (x *ExporterReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExporterReport.ProtoReflect.Descriptor instead.
func (*ExporterReport) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{4}
}

func (x *ExporterReport) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ExporterReport) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ExporterReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExporterReport) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ExporterReport) GetDeviceReport() []*DeviceReport {
	if x != nil {
		return x.DeviceReport
	}
	return nil
}

type DeviceReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        string  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                           // a unique id within the expoter
	ParentDeviceId  *string `protobuf:"bytes,2,opt,name=parent_device_id,json=parentDeviceId,proto3,oneof" json:"parent_device_id,omitempty"` // optional, if device has a parent device
	DeviceName      string  `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DriverInterface string  `protobuf:"bytes,4,opt,name=driver_interface,json=driverInterface,proto3" json:"driver_interface,omitempty"` // The driver interface class
}

func (x *DeviceReport) Reset() {
	*x = DeviceReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceReport) ProtoMessage() {}

func (x *DeviceReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceReport.ProtoReflect.Descriptor instead.
func (*DeviceReport) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceReport) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceReport) GetParentDeviceId() string {
	if x != nil && x.ParentDeviceId != nil {
		return *x.ParentDeviceId
	}
	return ""
}

func (x *DeviceReport) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceReport) GetDriverInterface() string {
	if x != nil {
		return x.DriverInterface
	}
	return ""
}

type ClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseOneof:
	//
	//	*ClientResponse_Pong
	//	*ClientResponse_ExporterReport
	//	*ClientResponse_DriverResponse
	//	*ClientResponse_Event
	//	*ClientResponse_Log
	ResponseOneof isClientResponse_ResponseOneof `protobuf_oneof:"response_oneof"`
}

func (x *ClientResponse) Reset() {
	*x = ClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResponse) ProtoMessage() {}

func (x *ClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResponse.ProtoReflect.Descriptor instead.
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{6}
}

func (m *ClientResponse) GetResponseOneof() isClientResponse_ResponseOneof {
	if m != nil {
		return m.ResponseOneof
	}
	return nil
}

func (x *ClientResponse) GetPong() *Pong {
	if x, ok := x.GetResponseOneof().(*ClientResponse_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *ClientResponse) GetExporterReport() *ExporterReport {
	if x, ok := x.GetResponseOneof().(*ClientResponse_ExporterReport); ok {
		return x.ExporterReport
	}
	return nil
}

func (x *ClientResponse) GetDriverResponse() *DriverResponse {
	if x, ok := x.GetResponseOneof().(*ClientResponse_DriverResponse); ok {
		return x.DriverResponse
	}
	return nil
}

func (x *ClientResponse) GetEvent() *Event {
	if x, ok := x.GetResponseOneof().(*ClientResponse_Event); ok {
		return x.Event
	}
	return nil
}

func (x *ClientResponse) GetLog() *Log {
	if x, ok := x.GetResponseOneof().(*ClientResponse_Log); ok {
		return x.Log
	}
	return nil
}

type isClientResponse_ResponseOneof interface {
	isClientResponse_ResponseOneof()
}

type ClientResponse_Pong struct {
	Pong *Pong `protobuf:"bytes,1,opt,name=pong,proto3,oneof"`
}

type ClientResponse_ExporterReport struct {
	ExporterReport *ExporterReport `protobuf:"bytes,2,opt,name=exporter_report,json=exporterReport,proto3,oneof"`
}

type ClientResponse_DriverResponse struct {
	DriverResponse *DriverResponse `protobuf:"bytes,3,opt,name=driver_response,json=driverResponse,proto3,oneof"`
}

type ClientResponse_Event struct {
	Event *Event `protobuf:"bytes,4,opt,name=event,proto3,oneof"`
}

type ClientResponse_Log struct {
	Log *Log `protobuf:"bytes,5,opt,name=log,proto3,oneof"`
}

func (*ClientResponse_Pong) isClientResponse_ResponseOneof() {}

func (*ClientResponse_ExporterReport) isClientResponse_ResponseOneof() {}

func (*ClientResponse_DriverResponse) isClientResponse_ResponseOneof() {}

func (*ClientResponse_Event) isClientResponse_ResponseOneof() {}

func (*ClientResponse_Log) isClientResponse_ResponseOneof() {}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Seq  uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{7}
}

func (x *Pong) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Pong) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type DriverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallUuid   string `protobuf:"bytes,1,opt,name=call_uuid,json=callUuid,proto3" json:"call_uuid,omitempty"`
	JsonResult string `protobuf:"bytes,2,opt,name=json_result,json=jsonResult,proto3" json:"json_result,omitempty"`
}

func (x *DriverResponse) Reset() {
	*x = DriverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverResponse) ProtoMessage() {}

func (x *DriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverResponse.ProtoReflect.Descriptor instead.
func (*DriverResponse) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{8}
}

func (x *DriverResponse) GetCallUuid() string {
	if x != nil {
		return x.CallUuid
	}
	return ""
}

func (x *DriverResponse) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Handle   *string `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
	Type     string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Data     string  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{9}
}

func (x *Event) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Event) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Handle   *string `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
	Level    string  `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Message  string  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{10}
}

func (x *Log) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Log) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *Log) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// data streaming from Exporter -> Server
//
//	or Server -> Exporter
//
// the seq number must be incremental
// data is opaque and driver dependent (could be audio/video/characters/...)
type DataChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // The device it belongs to
	Handle   *string `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`               // The handle inside the device i.e. when multiple streams/operations are possible
	Seq      uint64  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Offset   *uint64 `protobuf:"varint,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"` // The offset of the data in the stream (i.e. useful for block devices)
	Data     []byte  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_jumpstarter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_jumpstarter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_proto_jumpstarter_proto_rawDescGZIP(), []int{11}
}

func (x *DataChunk) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DataChunk) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *DataChunk) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *DataChunk) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DataChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_jumpstarter_proto protoreflect.FileDescriptor

var file_proto_jumpstarter_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0b,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x2c, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x39, 0x0a,
	0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x42, 0x79, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6d,
	0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a,
	0x0f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x2c, 0x0a, 0x04, 0x50, 0x6f, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x4e, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x74, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x7a, 0x0a,
	0x03, 0x4c, 0x6f, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0xd2, 0x02, 0x0a, 0x0b, 0x46,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x6a,
	0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1a, 0x2e, 0x6a, 0x75, 0x6d, 0x70,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x28, 0x01, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x03, 0x42, 0x79, 0x65,
	0x12, 0x18, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x42, 0x79, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x16, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01, 0x32,
	0xdd, 0x01, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x1a, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x1b, 0x2e, 0x6a,
	0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x40, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x6a, 0x75,
	0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61,
	0x6e, 0x67, 0x65, 0x6c, 0x61, 0x6a, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_jumpstarter_proto_rawDescOnce sync.Once
	file_proto_jumpstarter_proto_rawDescData = file_proto_jumpstarter_proto_rawDesc
)

func file_proto_jumpstarter_proto_rawDescGZIP() []byte {
	file_proto_jumpstarter_proto_rawDescOnce.Do(func() {
		file_proto_jumpstarter_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_jumpstarter_proto_rawDescData)
	})
	return file_proto_jumpstarter_proto_rawDescData
}

var file_proto_jumpstarter_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_jumpstarter_proto_goTypes = []interface{}{
	(*ServerCommand)(nil),  // 0: jumpstarter.ServerCommand
	(*Ping)(nil),           // 1: jumpstarter.Ping
	(*DriverCall)(nil),     // 2: jumpstarter.DriverCall
	(*ExporterBye)(nil),    // 3: jumpstarter.ExporterBye
	(*ExporterReport)(nil), // 4: jumpstarter.ExporterReport
	(*DeviceReport)(nil),   // 5: jumpstarter.DeviceReport
	(*ClientResponse)(nil), // 6: jumpstarter.ClientResponse
	(*Pong)(nil),           // 7: jumpstarter.Pong
	(*DriverResponse)(nil), // 8: jumpstarter.DriverResponse
	(*Event)(nil),          // 9: jumpstarter.Event
	(*Log)(nil),            // 10: jumpstarter.Log
	(*DataChunk)(nil),      // 11: jumpstarter.DataChunk
	nil,                    // 12: jumpstarter.ExporterReport.LabelsEntry
	(*structpb.Value)(nil), // 13: google.protobuf.Value
	(*emptypb.Empty)(nil),  // 14: google.protobuf.Empty
}
var file_proto_jumpstarter_proto_depIdxs = []int32{
	1,  // 0: jumpstarter.ServerCommand.ping:type_name -> jumpstarter.Ping
	2,  // 1: jumpstarter.ServerCommand.driver_call:type_name -> jumpstarter.DriverCall
	9,  // 2: jumpstarter.ServerCommand.event:type_name -> jumpstarter.Event
	13, // 3: jumpstarter.DriverCall.args:type_name -> google.protobuf.Value
	12, // 4: jumpstarter.ExporterReport.labels:type_name -> jumpstarter.ExporterReport.LabelsEntry
	5,  // 5: jumpstarter.ExporterReport.device_report:type_name -> jumpstarter.DeviceReport
	7,  // 6: jumpstarter.ClientResponse.pong:type_name -> jumpstarter.Pong
	4,  // 7: jumpstarter.ClientResponse.exporter_report:type_name -> jumpstarter.ExporterReport
	8,  // 8: jumpstarter.ClientResponse.driver_response:type_name -> jumpstarter.DriverResponse
	9,  // 9: jumpstarter.ClientResponse.event:type_name -> jumpstarter.Event
	10, // 10: jumpstarter.ClientResponse.log:type_name -> jumpstarter.Log
	4,  // 11: jumpstarter.ForExporter.Register:input_type -> jumpstarter.ExporterReport
	6,  // 12: jumpstarter.ForExporter.ControlStream:input_type -> jumpstarter.ClientResponse
	3,  // 13: jumpstarter.ForExporter.Bye:input_type -> jumpstarter.ExporterBye
	11, // 14: jumpstarter.ForExporter.DataStream:input_type -> jumpstarter.DataChunk
	9,  // 15: jumpstarter.ForExporter.EventStream:input_type -> jumpstarter.Event
	14, // 16: jumpstarter.ForClient.GetReport:input_type -> google.protobuf.Empty
	0,  // 17: jumpstarter.ForClient.ControlStream:input_type -> jumpstarter.ServerCommand
	11, // 18: jumpstarter.ForClient.DataStream:input_type -> jumpstarter.DataChunk
	14, // 19: jumpstarter.ForExporter.Register:output_type -> google.protobuf.Empty
	0,  // 20: jumpstarter.ForExporter.ControlStream:output_type -> jumpstarter.ServerCommand
	14, // 21: jumpstarter.ForExporter.Bye:output_type -> google.protobuf.Empty
	11, // 22: jumpstarter.ForExporter.DataStream:output_type -> jumpstarter.DataChunk
	9,  // 23: jumpstarter.ForExporter.EventStream:output_type -> jumpstarter.Event
	4,  // 24: jumpstarter.ForClient.GetReport:output_type -> jumpstarter.ExporterReport
	6,  // 25: jumpstarter.ForClient.ControlStream:output_type -> jumpstarter.ClientResponse
	11, // 26: jumpstarter.ForClient.DataStream:output_type -> jumpstarter.DataChunk
	19, // [19:27] is the sub-list for method output_type
	11, // [11:19] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_jumpstarter_proto_init() }
func file_proto_jumpstarter_proto_init() {
	if File_proto_jumpstarter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_jumpstarter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExporterBye); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExporterReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_jumpstarter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_jumpstarter_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ServerCommand_Ping)(nil),
		(*ServerCommand_DriverCall)(nil),
		(*ServerCommand_Event)(nil),
	}
	file_proto_jumpstarter_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_proto_jumpstarter_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ClientResponse_Pong)(nil),
		(*ClientResponse_ExporterReport)(nil),
		(*ClientResponse_DriverResponse)(nil),
		(*ClientResponse_Event)(nil),
		(*ClientResponse_Log)(nil),
	}
	file_proto_jumpstarter_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_jumpstarter_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_jumpstarter_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_jumpstarter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_jumpstarter_proto_goTypes,
		DependencyIndexes: file_proto_jumpstarter_proto_depIdxs,
		MessageInfos:      file_proto_jumpstarter_proto_msgTypes,
	}.Build()
	File_proto_jumpstarter_proto = out.File
	file_proto_jumpstarter_proto_rawDesc = nil
	file_proto_jumpstarter_proto_goTypes = nil
	file_proto_jumpstarter_proto_depIdxs = nil
}
